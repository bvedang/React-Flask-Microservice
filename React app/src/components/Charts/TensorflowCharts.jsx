import React, { useEffect, useState } from 'react';
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  BarChart,
  Bar,
} from 'recharts';
import Grid from '@mui/material/Grid';
import Typography from '@mui/material/Typography';
import './main.css';
import FBForecastImage from '../FBForecastImage';
import LSTMForecastingImage from '../LSTMForecastingImage';
import StatForecastinImage from '../StatForecastinImage';

const TensorflowCharts = () => {
  const [createdMonth, setCreatedMonth] = useState({});
  const [closedIssueWeekly, setClosedIssueWeekly] = useState({});
  const [createdIssues, setCreatedIssues] = useState({});
  const [fbForecastData, setFbForecastData] = useState({});
  const [lstmForecastData, setlstmForecastData] = useState({});
  const [statForecastData, setstatForecastData] = useState({});

  useEffect(() => {
    const url = 'http://127.0.0.1:5000/tensorflow';
    const fetchData = async () => {
      try {
        const resp = await fetch(url);
        const data = await resp.json();
        console.log(data);
        setCreatedMonth(data.createdMonth);
        setClosedIssueWeekly(data.closedWeekly);
        setCreatedIssues(data.issues);
        setFbForecastData(data.fbForecast);
        setlstmForecastData(data.lstmForecast);
        setstatForecastData(data.statForecast);
      } catch (error) {
        console.log(error);
      }
    };
    fetchData();
  }, []);
  return (
    <div className="mainComponent">
      <div className="grpahDiv">
        <Typography variant="h5" gutterBottom>
          A Line Chart to plot the issues for Tensorflow/Tensorflow Repository
        </Typography>
        <Grid container justifyContent="center" spacing={2}>
          <LineChart width={1000} height={450} data={createdIssues}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey="created_at" />
            <YAxis dataKey="issue_number" />
            <Tooltip />
            <Legend verticalAlign="top" height={36} />
            <Line
              type="monotone"
              dataKey="issue_number"
              stroke="#413ea0"
              activeDot={{ r: 8 }}
            />
          </LineChart>
        </Grid>
      </div>
      <div>
        <Typography variant="h5" gutterBottom>
          A Bar Chart to plot the issues created for every month for
          Tensorflow/Tensorflow Repository
        </Typography>
        <Grid container justifyContent="center" spacing={2}>
          <BarChart
            width={1000}
            height={450}
            data={createdMonth}
            margin={{
              top: 5,
              right: 30,
              left: 20,
              bottom: 5,
            }}
          >
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey="date" />
            <YAxis dataKey="issues" />
            <Tooltip />
            <Legend verticalAlign="top" height={36} />
            <Bar dataKey="issues" fill="#413ea0" />
          </BarChart>
        </Grid>
      </div>
      <div>
        <Typography variant="h5" gutterBottom>
          A Bar Chart to plot the issues closed for every Week for
          Tensorflow/Tensorflow Repository
        </Typography>
        <Grid container justifyContent="center" spacing={2}>
          <BarChart
            width={1000}
            height={450}
            data={closedIssueWeekly}
            margin={{
              top: 5,
              right: 30,
              left: 20,
              bottom: 5,
            }}
          >
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey="date" />
            <YAxis dataKey="issues" />
            <Tooltip />
            <Legend verticalAlign="top" height={36} />
            <Bar dataKey="issues" fill="#413ea0" />
          </BarChart>
        </Grid>
      </div>
      <div>
        <Typography variant="h5" gutterBottom>
          Forecast Generated by FB prophet models.
        </Typography>
        <FBForecastImage
          url={fbForecastData.issuesCreatedUrl}
          forecastOf={'Issues Created'}
        />
        <FBForecastImage
          url={fbForecastData.issuesClosedUrl}
          forecastOf={'Issues Closed'}
        />
        <FBForecastImage
          url={fbForecastData.commitsUrl}
          forecastOf={'Repo Commits'}
        />
        <FBForecastImage
          url={fbForecastData.pullUrl}
          forecastOf={'Repo Pulls'}
        />
        <FBForecastImage
          url={fbForecastData.releaseUrl}
          forecastOf={'Repo Releases'}
        />
      </div>
      <div>
        <Typography variant="h5" gutterBottom>
          Forecast Generated by LSTM Tensorflow model.
        </Typography>
        <LSTMForecastingImage
          url={lstmForecastData.issuesCreatedUrl}
          forecastOf={'Issues Created'}
        />
        <LSTMForecastingImage
          url={lstmForecastData.issuesClosedUrl}
          forecastOf={'Issues Closed'}
        />
        <LSTMForecastingImage
          url={lstmForecastData.commitsUrl}
          forecastOf={'Repo Commits'}
        />
        <LSTMForecastingImage
          url={lstmForecastData.pullUrl}
          forecastOf={'Repo Pulls'}
        />
        <LSTMForecastingImage
          url={lstmForecastData.releaseUrl}
          forecastOf={'Repo Releases'}
        />
      </div>
      <div>
        <Typography variant="h5" gutterBottom>
          Forecast Generated by Statsmodel.
        </Typography>
        <StatForecastinImage
          url={statForecastData.issuesCreatedUrl}
          forecastOf={'Issues Created'}
        />
        <StatForecastinImage
          url={statForecastData.issuesClosedUrl}
          forecastOf={'Issues Closed'}
        />
        <StatForecastinImage
          url={statForecastData.commitsUrl}
          forecastOf={'Repo Commits'}
        />
        <StatForecastinImage
          url={statForecastData.pullUrl}
          forecastOf={'Repo Pulls'}
        />
        <StatForecastinImage
          url={statForecastData.releaseUrl}
          forecastOf={'Repo Releases'}
        />
      </div>
    </div>
  );
};

export default TensorflowCharts;
